module com (a, b, op, out, r1, r2, s, c, l);
input [3:0] a, b, c;
input [6:0] l;
output reg [3:0] r1, r2;
output reg [6:0] op;
output reg [23:0]out;
input [3:0] s;
wire [6:0] q, pro;

wire cout;
wire [3:0] t, w;
wire [6:0] p, r, u, v;
wire [3:0] mn, pq;
wire [23:0] outp;
assign mn = a;
assign pq =b;
dsdv g4 (outp, a, b);
vedic_10 g3(t, w, mn, pq, c, l);
vedic_3 g1(a, b, pro);
always @*
begin
if (s ==4&#39;b0000)//vedic_3
begin
op = pro;
r1=4&#39;bz;
r2 = 4&#39;bz;
out =24&#39;bz;
end
else if(s==4&#39;b0001)//vedic_10
begin
r1=t;
r2=w;
op=7&#39;bz;
out = 24&#39;bz;
end
else if (s==4&#39;b0010)// vedic_6
begin
out = outp;
op = 7&#39;bz;
r1=4&#39;bz;

r2 = 4&#39;bz;
end
end
endmodule

module vedic_3(a, b, pro);
input [3:0] a, b;
output [6:0] pro;
wire [7:0] c;
wire cin;
assign cin = 0;
ha g1(pro [0], c [0], a [0] &amp;b [0], cin);
ha g2(pro[1],c[1] ,(a[1]&amp;b[0])| (a[0]&amp;b[1]),c[0]);
ha g3(pro[2],c[2] ,(a[2]&amp;b[0]) | (a[1]&amp;b[1])|(a[0]&amp;b[2]),c[1]);
ha g4(pro[3],c[3] ,(a[3]&amp;b[0]) |(a[2]&amp;b[1]) | (a[1]&amp;b[2]) | (a[0]&amp;b[3]),c[2]);
ha g5(pro[4],c[4] ,(a[3]&amp;b[1]) | (a[2]&amp;b[2]) | (a[1]&amp;b[3]) ,c[3]);
ha g6(pro[5],c[5] ,(a[3]&amp;b[2])|(a[2]&amp;b[3]),c[4]);
ha g7(pro[6],c[6] ,a[3]&amp;b[3],c[5]);
endmodule

module ha(s,cout,a,b);
input a,b;
output s,cout;
assign s = a^b;
assign cout = (a&amp;b);
endmodule

module vedic_10(r1,r2,a,b,c,z);
input signed [3:0] a;
input signed [3:0] b;

input signed [3:0] c;
input [6:0] z;
wire signed [6:0] sqr_root;
wire [6:0] p;
wire [6:0] x;
wire [12:0] m;
wire [6:0] n;
wire signed [3:0] s1;
wire signed [3:0] s2;
output signed [3:0] r1;
output signed [3:0] r2;
assign p[0]=(b[0]&amp;b[0]),p[1]=(b[0]&amp;b[1])|(b[1]&amp;b[0]);
assign
p[2]=(b[0]&amp;b[2])|(b[2]&amp;b[0])|(b[1]&amp;b[1]),p[3]=(b[0]&amp;b[3])|(b[3]&amp;b[0])|(b[2]&amp;b[1])|(b[2]&amp;b[1]);
assign
p[4]=(b[3]&amp;b[1])|(b[3]&amp;b[1])|(b[2]&amp;b[2]),p[5]=(b[3]&amp;b[2])|(b[3]&amp;b[2]),p[6]=(b[3]&amp;b[3]);
assign
x[0]=(a[0]&amp;c[0]),x[1]=(a[1]&amp;c[0])|(a[0]&amp;c[1]),x[2]=(a[2]&amp;c[0])|(a[0]&amp;c[2])|(a[1]&amp;c[1]);
assign
x[3]=(a[3]&amp;c[0])|(a[0]&amp;c[3])|(a[2]&amp;c[1])|(a[1]&amp;c[2]),x[4]=(a[3]&amp;c[1])|(a[1]&amp;c[3])|(a[2]&amp;c[2]);
assign x[5]=(a[3]&amp;c[2])|(a[2]&amp;c[3]),x[6]=(a[3]&amp;c[3]);
assign m =x*z;
assign n=~(p|~m);
sq g1(sqr_root,n);
assign s1 = -(b + (~(sqr_root)+1));
assign s2=s1;
assign r1 = s1/2*a;
assign r2 = r1;
endmodule
module sq(sqr_root,n);
input [6:0] n;
output [6:0] sqr_root;

reg [6:0] sqr_root;
integer temp;
reg [6:0] i;
always@(*)
begin
sqr_root = 6&#39;b0;
for(i=0;i&lt;(n/2);i=i+1)
begin
temp = i*i;
if(temp==n)
begin
sqr_root = i;
end
end
end
always @(n)
begin
case({n})
6&#39;b0000000:sqr_root[6:0]=6&#39;b0000000;
endcase
end
endmodule

module dsdv(qout,a,b);
input [3:0] a;
input [3:0] b;
reg [3:0] r1; reg[7:0] r11; reg [3:0] q1;
reg [3:0] r2; reg [7:0] r22; reg [3:0] q2;
reg [3:0] r3; reg[7:0] r33; reg [3:0] q3;
reg [3:0] r4; reg [7:0] r44; reg [3:0] q4;
reg [3:0] r5; reg [7:0] r55;reg [3:0] q5;

reg [3:0] r6; reg [7:0] r66; reg [3:0] q6;
output[23:0] qout;

reg [23:0] qout;
reg [7:0] temp1;
reg [7:0] temp2;
reg [7:0] temp3;
reg [7:0] temp4;
reg [7:0] temp5;
reg [7:0] temp6;
reg [7:0] temp7;

always@(a,b)
begin
if(a&lt;b)//1&lt;7
temp1=a*4&#39;b1010;//10=1*10
r1=temp1%b;//3=10%7
r11=r1*b;//hexa 15=3*7
q1=r11[3:0]; //5

if(r1&lt;b)//3&lt;7
temp2=r1*4&#39;b1010;//30=3*10
r2=temp2%b;//2=30%7
r22=r2*b;//hexa 0e=2*7
q2=r22[3:0] ;//e

if(r2&lt;b)//2&lt;7
temp3=r2*4&#39;b1010;//20=2*10
r3=temp3%b;//6=20%7
r33=r3*b;//hexa 2a=6*7
q3=r33[3:0] ;//a

if(r3&lt;b)//6&lt;7
temp4=r3*4&#39;b1010;//60=6*10
r4=temp4%b;//4=60%7
r44=r4*b;//hexa 1c=4*7
q4=r44[3:0]; //c

if(r4&lt;b)//4&lt;7
temp5=r4*4&#39;b1010;//40=4*10
r5=temp5%b;//5=40%7
r55=r5*b;//hexa 23=5*7
q5=r55[3:0]; //3

if(r5&lt;b)//5&lt;7
temp6=r5*4&#39;b1010;//50=5*10
r6=temp6%b;//1=50%7
r66=r6*b;//hexa 07=1*7
q6=r66[3:0]; //7

qout = {q1, q2, q3, q4, q5, q6};//hexa 5, e, a, c,3,7

end
endmodule
